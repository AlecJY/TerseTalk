package com.alec.ttalk.autotalk;

import com.alec.ttalk.TerseTalk;
import com.alec.ttalk.common.DialogTitleBar;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

/**
 * Created by Alec on 2015/6/25.
 */
public class AutoTalkWindow extends JDialog {
    private JPanel panel;
    private JTextField pathTextField;
    private JButton browseButton;
    private JButton startButton;
    private JButton exitButton;

    private JFileChooser fileChooser = new JFileChooser();
    private ResourceBundle lang = ResourceBundle.getBundle("lang/tTalk"); // load lang

    public AutoTalkWindow() {
        JPanel mainPanel = new JPanel(new BorderLayout());

        setTitle("AutoTalk - TerseTalk");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setModal(true);
        setLayout(new BorderLayout());
        setLocationRelativeTo(null);
        setUndecorated(true);
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainPanel.add(new DialogTitleBar(this), BorderLayout.NORTH);
        mainPanel.add(panel);
        mainPanel.setBorder(BorderFactory.createLineBorder(new Color(97, 101, 104)));
        add(mainPanel);
        pack();


        FileNameExtensionFilter filter = new FileNameExtensionFilter("Python Scripts", "py");
        fileChooser.setFileFilter(filter);
        pathTextField.setText(TerseTalk.xmppControl.getScriptPath());
        if (TerseTalk.xmppControl.isAutoTalkStarted()) {
            startButton.setText(lang.getString("AutoTalkWindow.stop"));
        } else {
            startButton.setText(lang.getString("AutoTalkWindow.start"));
        }
        browseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                chooseFile();
            }
        });
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                start();
            }
        });

        setVisible(true);
    }


    public void chooseFile() {
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            pathTextField.setText(fileChooser.getSelectedFile().toString());
            TerseTalk.xmppControl.setScriptPath(fileChooser.getSelectedFile().toString());
        }
    }

    public void start() {
        if (TerseTalk.xmppControl.isAutoTalkStarted()) {
            TerseTalk.xmppControl.setAutoTalk(false);
            startButton.setText(lang.getString("AutoTalkWindow.start"));
        } else {
            if (TerseTalk.xmppControl.getScriptPath() != null) {
                TerseTalk.xmppControl.setAutoTalk(true);
                startButton.setText(lang.getString("AutoTalkWindow.stop"));
            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        pathTextField = new JTextField();
        pathTextField.setEditable(false);
        pathTextField.setEnabled(true);
        panel1.add(pathTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        browseButton = new JButton();
        this.$$$loadButtonText$$$(browseButton, ResourceBundle.getBundle("lang/tTalk").getString("AutoTalkWindow.browse"));
        panel1.add(browseButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Button");
        panel2.add(startButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(80, -1), new Dimension(80, -1), new Dimension(80, -1), 0, false));
        exitButton = new JButton();
        this.$$$loadButtonText$$$(exitButton, ResourceBundle.getBundle("lang/tTalk").getString("AutoTalkWindow.exit"));
        panel2.add(exitButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(80, -1), new Dimension(80, -1), new Dimension(80, -1), 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
